#ifndef VIRTIO_H
#define VIRTIO_H

#include "../pci.h"

namespace VIRTIO {
    struct virtq {
        // The actual descriptors (16 bytes each)
        struct virtq_desc desc[ Queue Size ];
        // A ring of available descriptor heads with free-running index.
        struct virtq_avail avail;
        // Padding to the next Queue Align boundary.
        u8 pad[ Padding ];
        // A ring of used descriptor heads with free-running index.
        struct virtq_used used;
    };
    struct virtq_desc {
        /* Address (guest-physical). */
        le64 addr;
        /* Length. */
        le32 len;
        /* This marks a buffer as continuing via the next field. */
        #define VIRTQ_DESC_F_NEXT 1
        /* This marks a buffer as device write-only (otherwise device read-only). */
        #define VIRTQ_DESC_F_WRITE 2
        /* This means the buffer contains a list of buffer descriptors. */
        #define VIRTQ_DESC_F_INDIRECT 4
        /* The flags as indicated above. */
        le16 flags;
        /* Next field if flags & NEXT */
        le16 next;
    };
    struct virtq_avail {
        #define VIRTQ_AVAIL_F_NO_INTERRUPT 1
        le16 flags;
        le16 idx;
        le16 ring[ /* Queue Size */ ];
        le16 used_event; /* Only if VIRTIO_F_EVENT_IDX */
    };
    struct virtq_used {
        #define VIRTQ_USED_F_NO_NOTIFY 1
        le16 flags;
        le16 idx;
        struct virtq_used_elem ring[ /* Queue Size */];
        le16 avail_event; /* Only if VIRTIO_F_EVENT_IDX */
    };
    /* le32 is used here for ids for padding reasons. */
    struct virtq_used_elem {
        /* Index of start of used descriptor chain. */
        le32 id;
        /* Total length of the descriptor chain which was used (written to) */
        le32 len;
    };


    struct virtio_pci_common_cfg {
        /* About the whole device. */
        le32 device_feature_select; /* read-write */
        le32 device_feature; /* read-only for driver */
        le32 driver_feature_select; /* read-write */
        le32 driver_feature; /* read-write */
        le16 msix_config; /* read-write */
        le16 num_queues; /* read-only for driver */
        u8 device_status; /* read-write */
        u8 config_generation; /* read-only for driver */
        
        /* About a specific virtqueue. */
        le16 queue_select; /* read-write */
        le16 queue_size; /* read-write */
        le16 queue_msix_vector; /* read-write */
        le16 queue_enable; /* read-write */
        le16 queue_notify_off; /* read-only for driver */
        le64 queue_desc; /* read-write */
        le64 queue_driver; /* read-write */
        le64 queue_device; /* read-write */
    };


    class VirtioDriver{
        public:
        VirtioDriver(PCI::PCIDeviceHeader* pciBaseAddress);
        ~VirtioDriver();
        PCI::PCIDeviceHeader* pciBaseAddress;

    }
}

#endif