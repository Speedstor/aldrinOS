

    //
    // Define EHCI capability register offsets.
    //

    #define EHCI_CAPABILITY_LENGTH_REGISTER                0x00
    #define EHCI_CAPABILITY_VERSION_REGISTER               0x02
    #define EHCI_CAPABILITY_PARAMETERS_REGISTER            0x04
    #define EHCI_CAPABILITY_PARAMETERS_PORT_COUNT_MASK     0x0000000F
    #define EHCI_CAPABILITY_CAPABILITIES_REGISTER          0x08
    #define EHCI_CAPABILITY_CAPABILITIES_EXTENDED_CAPABILITIES_MASK 0x0000FF00
    #define EHCI_CAPABILITY_CAPABILITIES_EXTENDED_CAPABILITIES_SHIFT 8
    #define EHCI_CAPABILITY_PORT_ROUTING_REGISTER          0x0C


namespace USB {



    UHCIDriver::UHCIDriver(PCI::PCIDeviceHeader* pciBaseAddress) {
        this->pciBaseAddress = pciBaseAddress;
        // PRINT::Println("Initializing USB root device");
    }

    EHCIDriver::EHCIDriver(PCI::PCIDeviceHeader* pciBaseAddress) {
        this->pciBaseAddress = pciBaseAddress;

        UsbBase = ((PCI::PCIHeader0*)pciBaseAddress)->BAR0;
        // UsbOperateBase = *((uint8_t*) UsbBase + EHCI_CAPABILITY_LENGTH_REGISTER);
        PRINT::Next();
        PRINT::Println("Initializing USB EHCI root device !!");
        PRINT::Next();

        SBRN = *((uint8_t*) (uint64_t) pciBaseAddress + PCI_SBRN_OFFSET);
        FLADJ = *((uint8_t*) (uint64_t) pciBaseAddress + PCI_FLADJ_OFFSET);
        PWAKECAP = *((uint16_t*) (uint64_t) pciBaseAddress + PCI_PWAKECAP_OFFSET);
        // Version = *((uint8_t*) UsbBase + EHCI_CAPABILITY_VERSION_REGISTER);
        PRINT::Println(to_hstring(SBRN));
        PRINT::Println(to_hstring(FLADJ));
        PRINT::Println(to_bstring(PWAKECAP));
        PRINT::Next();
    }
}